'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { createSupabaseClient } from '@/lib/supabase/client';
import { MainLayout } from '@/components/layout/main-layout';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { FileText, Plus, Search, Filter, Save, X, Folder, FolderPlus } from 'lucide-react';
import { useAuth } from '@/components/auth/auth-provider';

interface Note {
  id: string;
  title: string;
  content: string;
  template?: string;
  tags?: string[];
  folder_id?: string;
  custom_date?: string;
  created_at: string;
  updated_at: string;
}

interface Folder {
  id: string;
  name: string;
  parent_id?: string;
  safe_artifact?: string;
  created_at: string;
  updated_at: string;
}

interface NotesClientProps {
  initialNotes: Note[];
}

const SAFE_TEMPLATES = [
  {
    id: 'user-story',
    name: 'User Story Template',
    content: `# User Story

## As a [type of user], I want [some goal] so that [some reason].

### Acceptance Criteria:
- [ ] Given [context], when [action], then [outcome]
- [ ] Given [context], when [action], then [outcome]
- [ ] Given [context], when [action], then [outcome]

### INVEST Criteria:
- [ ] **Independent**: Can be developed and tested independently
- [ ] **Negotiable**: Implementation details can be adjusted
- [ ] **Valuable**: Provides clear value to users/business
- [ ] **Estimable**: Team can estimate effort required
- [ ] **Small**: Can be completed within one sprint
- [ ] **Testable**: Clear acceptance criteria enable testing

### Story Points:
### Priority:
### Sprint:

### Definition of Done:
- [ ] Code implemented and unit tested
- [ ] Code reviewed and approved
- [ ] Documentation updated
- [ ] User acceptance testing completed`
  },
  {
    id: 'epic',
    name: 'Epic Template',
    content: `# Epic: [Epic Name]

## Epic Hypothesis
We believe that [doing this] will achieve [this outcome]. We will know we have succeeded when we see [this measurable signal].

## Business Objectives
- [Primary business objective]
- [Secondary business objective]

## Features
- [ ] Feature 1: [Description]
- [ ] Feature 2: [Description]
- [ ] Feature 3: [Description]

## Success Metrics
- [Metric 1]: [Target]
- [Metric 2]: [Target]

## Assumptions & Dependencies
### Assumptions:
- [Assumption 1]
- [Assumption 2]

### Dependencies:
- [Dependency 1]
- [Dependency 2]

## Timeline
**Start Date**:
**Target Completion**:
**PI**:

## MVP Definition
[What is the minimum viable product for this epic?]`
  },
  {
    id: 'retrospective',
    name: 'Retrospective Template',
    content: `# Sprint Retrospective

**Sprint**: [Sprint Number]
**Date**: [Date]
**Participants**: [Team Members]

## What Went Well? ðŸŸ¢
- [Item 1]
- [Item 2]
- [Item 3]

## What Could Be Improved? ðŸŸ¡
- [Item 1]
- [Item 2]
- [Item 3]

## What Didn't Work? ðŸ”´
- [Item 1]
- [Item 2]
- [Item 3]

## Action Items
| Action | Owner | Due Date | Status |
|--------|--------|----------|---------|
| [Action 1] | [Name] | [Date] | [ ] |
| [Action 2] | [Name] | [Date] | [ ] |

## Sprint Metrics
- **Velocity**: [Points completed]
- **Commitment**: [Points planned]
- **Team Mood**: [1-10 scale]

## Key Learnings
- [Learning 1]
- [Learning 2]

## Next Sprint Focus
[What should the team focus on in the next sprint?]`
  }
];

export function NotesClientPage({ initialNotes }: NotesClientProps) {
  const [notes, setNotes] = useState<Note[]>(initialNotes);
  const [folders, setFolders] = useState<Folder[]>([]);
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [isCreateFolderDialogOpen, setIsCreateFolderDialogOpen] = useState(false);
  const [newNoteTitle, setNewNoteTitle] = useState('');
  const [newNoteContent, setNewNoteContent] = useState('');
  const [selectedTemplate, setSelectedTemplate] = useState<string>('');
  const [selectedFolder, setSelectedFolder] = useState<string>('');
  const [customDate, setCustomDate] = useState<string>('');
  const [newFolderName, setNewFolderName] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const { user } = useAuth();
  const router = useRouter();
  const supabase = createSupabaseClient();

  const notesCount = notes.length;

  const handleTemplateSelect = (templateId: string) => {
    setSelectedTemplate(templateId);
    if (templateId === 'blank') {
      setNewNoteTitle('');
      setNewNoteContent('');
    } else {
      const template = SAFE_TEMPLATES.find(t => t.id === templateId);
      if (template) {
        setNewNoteTitle(template.name);
        setNewNoteContent(template.content);
      }
    }
  };

  // Fetch folders on component mount
  const fetchFolders = async () => {
    if (!user) return;

    const { data: folders, error } = await supabase
      .from('folders')
      .select('*')
      .eq('user_id', user.id)
      .order('name', { ascending: true });

    if (error) {
      console.error('Error fetching folders:', error);
    } else {
      setFolders(folders || []);
    }
  };

  // Create new folder
  const handleCreateFolder = async () => {
    if (!user || !newFolderName.trim()) return;

    setIsLoading(true);
    try {
      const { data, error } = await supabase
        .from('folders')
        .insert([
          {
            name: newFolderName.trim(),
            user_id: user.id,
          },
        ])
        .select()
        .single();

      if (error) {
        console.error('Error creating folder:', error);
      } else {
        setFolders(prev => [...prev, data]);
        setNewFolderName('');
        setIsCreateFolderDialogOpen(false);
      }
    } catch (error) {
      console.error('Error creating folder:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleCreateNote = async () => {
    if (!user || !newNoteTitle.trim() || !newNoteContent.trim()) return;

    setIsLoading(true);
    try {
      const { data, error } = await supabase
        .from('notes')
        .insert([
          {
            title: newNoteTitle.trim(),
            content: newNoteContent.trim(),
            template: selectedTemplate === 'blank' ? null : selectedTemplate || null,
            folder_id: selectedFolder || null,
            custom_date: customDate || null,
            user_id: user.id,
          },
        ])
        .select()
        .single();

      if (error) throw error;

      // Add the new note to the list
      setNotes([data, ...notes]);

      // Reset form
      setNewNoteTitle('');
      setNewNoteContent('');
      setSelectedTemplate('');
      setSelectedFolder('');
      setCustomDate('');
      setIsCreateDialogOpen(false);

      // Refresh to get server-side data
      router.refresh();
    } catch (error: any) {
      console.error('Error creating note:', error);
      alert('Failed to create note: ' + error.message);
    } finally {
      setIsLoading(false);
    }
  };

  const resetForm = () => {
    setNewNoteTitle('');
    setNewNoteContent('');
    setSelectedTemplate('');
    setSelectedFolder('');
    setCustomDate('');
  };

  // Fetch folders on component mount
  useEffect(() => {
    fetchFolders();
  }, [user]);

  return (
    <MainLayout>
      <div className="p-8 space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-[var(--foreground)]">Notes</h1>
            <p className="text-[var(--muted-foreground)] mt-1">
              Create and manage your SAFe templates and meeting notes
            </p>
          </div>
          <div className="flex items-center space-x-3">
            <Button variant="outline" size="sm">
              <Search className="w-4 h-4 mr-2" />
              Search Notes
            </Button>
            <Button variant="outline" size="sm">
              <Filter className="w-4 h-4 mr-2" />
              Filter
            </Button>

            <div className="flex space-x-2">
              <Dialog open={isCreateFolderDialogOpen} onOpenChange={setIsCreateFolderDialogOpen}>
                <DialogTrigger asChild>
                  <Button variant="outline">
                    <FolderPlus className="w-4 h-4 mr-2" />
                    New Folder
                  </Button>
                </DialogTrigger>
                <DialogContent className="max-w-md">
                  <DialogHeader>
                    <DialogTitle>Create New Folder</DialogTitle>
                  </DialogHeader>
                  <div className="space-y-4 pt-4">
                    <div>
                      <label className="text-sm font-medium mb-2 block">Folder Name</label>
                      <Input
                        value={newFolderName}
                        onChange={(e) => setNewFolderName(e.target.value)}
                        placeholder="Enter folder name"
                        onKeyDown={(e) => e.key === 'Enter' && handleCreateFolder()}
                      />
                    </div>
                    <div className="flex justify-end space-x-2">
                      <Button
                        variant="outline"
                        onClick={() => {
                          setNewFolderName('');
                          setIsCreateFolderDialogOpen(false);
                        }}
                      >
                        Cancel
                      </Button>
                      <Button onClick={handleCreateFolder} disabled={!newFolderName.trim() || isLoading}>
                        {isLoading ? 'Creating...' : 'Create Folder'}
                      </Button>
                    </div>
                  </div>
                </DialogContent>
              </Dialog>

              <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
                <DialogTrigger asChild>
                  <Button>
                    <Plus className="w-4 h-4 mr-2" />
                    New Note
                  </Button>
                </DialogTrigger>
                <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
                <DialogHeader>
                  <DialogTitle>Create New Note</DialogTitle>
                </DialogHeader>

                <div className="space-y-4">
                  {/* Template Selection */}
                  <div>
                    <label className="text-sm font-medium mb-2 block">
                      Use a SAFe Template (optional)
                    </label>
                    <Select value={selectedTemplate} onValueChange={handleTemplateSelect}>
                      <SelectTrigger>
                        <SelectValue placeholder="Choose a template or start blank" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="blank">Blank Note</SelectItem>
                        {SAFE_TEMPLATES.map((template) => (
                          <SelectItem key={template.id} value={template.id}>
                            {template.name}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  {/* Folder Selection */}
                  <div>
                    <label className="text-sm font-medium mb-2 block">
                      Folder (optional)
                    </label>
                    <Select value={selectedFolder} onValueChange={setSelectedFolder}>
                      <SelectTrigger>
                        <SelectValue placeholder="Select a folder or leave blank" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="">No Folder</SelectItem>
                        {folders.map((folder) => (
                          <SelectItem key={folder.id} value={folder.id}>
                            {folder.name}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  {/* Custom Date */}
                  <div>
                    <label className="text-sm font-medium mb-2 block">
                      Date (optional)
                    </label>
                    <Input
                      type="date"
                      value={customDate}
                      onChange={(e) => setCustomDate(e.target.value)}
                      placeholder="Select a date for this note"
                    />
                  </div>

                  {/* Title */}
                  <div>
                    <label className="text-sm font-medium mb-2 block">Title</label>
                    <Input
                      value={newNoteTitle}
                      onChange={(e) => setNewNoteTitle(e.target.value)}
                      placeholder="Enter note title..."
                    />
                  </div>

                  {/* Content */}
                  <div>
                    <label className="text-sm font-medium mb-2 block">Content</label>
                    <Textarea
                      value={newNoteContent}
                      onChange={(e) => setNewNoteContent(e.target.value)}
                      placeholder="Start writing your note..."
                      rows={15}
                      className="font-mono text-sm"
                    />
                  </div>

                  {/* Actions */}
                  <div className="flex justify-end space-x-3 pt-4 border-t">
                    <Button
                      variant="outline"
                      onClick={() => {
                        resetForm();
                        setIsCreateDialogOpen(false);
                      }}
                    >
                      <X className="w-4 h-4 mr-2" />
                      Cancel
                    </Button>
                    <Button
                      onClick={handleCreateNote}
                      disabled={isLoading || !newNoteTitle.trim() || !newNoteContent.trim()}
                    >
                      <Save className="w-4 h-4 mr-2" />
                      {isLoading ? 'Creating...' : 'Create Note'}
                    </Button>
                  </div>
                </div>
              </DialogContent>
            </Dialog>
          </div>
        </div>

        {/* Stats */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium text-[var(--muted-foreground)]">
                Total Notes
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{notesCount}</div>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium text-[var(--muted-foreground)]">
                Templates
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {notes.filter(n => n.template).length}
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium text-[var(--muted-foreground)]">
                Meeting Notes
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {notes.filter(n => n.template === 'retrospective').length}
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium text-[var(--muted-foreground)]">
                User Stories
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {notes.filter(n => n.template === 'user-story').length}
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Templates Section */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <FileText className="w-5 h-5 text-[var(--primary-green)]" />
              <span>SAFe Templates</span>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {SAFE_TEMPLATES.map((template) => (
                <Card key={template.id} className="cursor-pointer hover:bg-[var(--muted)] transition-colors">
                  <CardContent className="p-4">
                    <h3 className="font-medium mb-2">{template.name}</h3>
                    <p className="text-sm text-[var(--muted-foreground)] mb-3">
                      {template.id === 'user-story' && 'Standard user story with INVEST criteria'}
                      {template.id === 'epic' && 'Epic planning and breakdown template'}
                      {template.id === 'retrospective' && 'Sprint retrospective meeting notes'}
                    </p>
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => {
                        handleTemplateSelect(template.id);
                        setIsCreateDialogOpen(true);
                      }}
                    >
                      Use Template
                    </Button>
                  </CardContent>
                </Card>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* Recent Notes */}
        <Card>
          <CardHeader>
            <CardTitle>Recent Notes</CardTitle>
          </CardHeader>
          <CardContent>
            {notesCount === 0 ? (
              <div className="text-center py-12">
                <FileText className="w-12 h-12 text-[var(--muted-foreground)] mx-auto mb-4" />
                <h3 className="font-medium text-lg mb-2">No notes yet</h3>
                <p className="text-[var(--muted-foreground)] mb-4">
                  Start by creating your first note or using a SAFe template
                </p>
                <Button onClick={() => setIsCreateDialogOpen(true)}>
                  <Plus className="w-4 h-4 mr-2" />
                  Create First Note
                </Button>
              </div>
            ) : (
              <div className="space-y-4">
                {notes.map((note) => (
                  <Card key={note.id} className="cursor-pointer hover:bg-[var(--muted)] transition-colors">
                    <CardContent className="p-4">
                      <div className="flex items-start justify-between">
                        <div>
                          <h3 className="font-medium mb-1">{note.title}</h3>
                          <p className="text-sm text-[var(--muted-foreground)] mb-2 line-clamp-3">
                            {note.content.substring(0, 200)}...
                          </p>
                          <div className="flex items-center space-x-4 text-xs text-[var(--muted-foreground)] flex-wrap">
                            <span>Updated {new Date(note.updated_at).toLocaleDateString()}</span>
                            {note.custom_date && (
                              <span className="flex items-center">
                                ðŸ“… {new Date(note.custom_date).toLocaleDateString()}
                              </span>
                            )}
                            {note.folder_id && (
                              <span className="bg-[var(--accent-blue)] text-white px-2 py-1 rounded flex items-center">
                                <Folder className="w-3 h-3 mr-1" />
                                {folders.find(f => f.id === note.folder_id)?.name || 'Unknown Folder'}
                              </span>
                            )}
                            {note.template && (
                              <span className="bg-[var(--primary-green)] text-white px-2 py-1 rounded">
                                {SAFE_TEMPLATES.find(t => t.id === note.template)?.name || note.template}
                              </span>
                            )}
                          </div>
                        </div>
                        <Button size="sm" variant="outline">
                          Open
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </MainLayout>
  );
}